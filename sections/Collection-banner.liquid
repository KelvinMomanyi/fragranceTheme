   <!-- 
        - #ABOUT
      -->

      <section class="section about" id="about" aria-label="about" data-aos="fade-up">
        <div class="container"> 

          <h2 class="section-title">{{ section.settings.title}}</h2>

          <p class="section-text">
            {{ section.settings.info}}
          </p>
        </div>
          <div class="about-card">
            <figure class="card-banner img-holder" style="--width: 1380; --height: 550;">
            {% comment %}<div style="width: 100%; height:100%; background-image: url('{{ 'F5.jpg' | asset_url }}'); background-size: cover; background-position: center; background-attachment: fixed;" role="img" aria-label="Woodex promo"></div>{% endcomment %}
              <video id="promoVideo" width="1170" height="550" class="img-cover" autoplay loop muted playsinline>
                <source src="{{ 'Ink.mp4' | asset_url }}" type="video/mp4">
                Your browser does not support the video tag.
              </video>
            
              {% comment %} <img src="{{'F5.jpg' | asset_url}}" width="1170" height="450" loading="lazy" alt="Woodex promo"
                class="img-cover"> {% endcomment %}
            </figure>

            {% comment %} <button class="play-btn" aria-label="play video">
              <p class="scents">Scents that Speak, Luxury You Can Wear.</p>
            </button>  {% endcomment %}
                <div class="box">
                    <span>scent</span>
                    <span>&nbsp;</span>
                    <span>that</span>
                    <span>&nbsp;</span>
                    <span>you</span>
                    <span>&nbsp;</span>
                    <span>can</span>
                    <span>&nbsp;</span>
                    <span>wear</span>
              </div>
          </div>

        {% comment %} </div> {% endcomment %}
      </section>

 <style>

  .collection {padding-block-start: 0; margin-top:5%;}
  

  
  .collection-list{
   display: grid;
   gap: 15px;
  }
  
  .collection-card{
    background-color: var(--light-gray);
    min-height: 400px;
    padding:40px;
    padding-block-end: 30px;
    display: flex;
    flex-direction: column;
  }
  
  .collection-card .card-title{
    margin-block-end: 12px;
  }
  
  .collection-card .card-text{
    color:var(--black);
    font-size: var(--fs-6);
    font-weight: var(--fs-600);
    margin-block-end: auto;
  }

  .scents{
    font-size: large;
    font-family:var(--ff-roboto) ;
  }
      /*
  responsive for larger than 575px screen
  */

  .box {
  position: fixed;
  top: 60%;
  left: 50%;
  transform: translate(-50%, -50%);
  white-space: nowrap;
}

.box span {
  font-family: "Quicksand", sans-serif;
  font-weight: 400;
  font-style: normal;
  text-shadow: 0px 0px 5px rgba(31, 29, 46, 0.55);
  font-size: 4rem;
  text-transform: uppercase;
  color: rgb(212, 212, 212);
  display: inline-block;
}

  @media screen and (max-width: 575px) {
    
    .scents{
    font-size: medium;
  }

  .box {

    top: 70%;

  }
  .box span {
    font-size:2rem
   }

}
    
    
    /*
    responsive for larger than 768px screen
    */
    @media screen and (min-width: 768px) {
       
      .flex-item{max-width: calc(50% - 15px);}

      
      
      
      /*
      COLLECTION
      */
      .collection-card{ min-height:450px;}
      
      }

      .scents{
        font-size: large;
      }
    
    
    /*
    responsive for larger than 992px screen
    */
    @media screen and (min-width: 992px) {
    
      .scrollbar-item {min-width: calc(33.33% - 20px);}
    
      .flex-item {max-width: calc(33.33% - 20px);}
    
    
         /*
     COLLECTION
      */
    
      .collection-list{
        grid-template-columns: repeat(3, 1fr);
        gap: 30px;
      }

      .scents{
        font-size: large;
      }
    
    }
    
    /*
    responsive for larger than 1200px screen
    */
    @media screen and (min-width: 1200px) {

     .scrollbar-item {min-width: calc(20% - 24px);}
    
     .flex-item {max-width: calc(33.33% - 20px);}
     
     .scents{
       font-size:large;
    }
     
    }
 </style>
<script src="https://cdn.jsdelivr.net/npm/scrollmoo@1.0.7/dist/scrollmoo.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function () {
    const video = document.getElementById("promoVideo");
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                video.currentTime = 1; // Restart video
                video.play(); // Play video
            } else {
                video.pause(); // Pause video when out of view
            }
        });
    }, { threshold: 0.5 }); // Trigger when at least 50% is visible

    observer.observe(video);
});


function initSlowMotionEffect() {
    const boxElement = document.querySelector('.box');
    const spans = document.querySelectorAll('.box span');
    
    if (!boxElement || spans.length === 0) return;
    
    // Original effect parameters
    let start = -300;
    let end = 300;
    let steps = spans.length;
    let stepSize = (end - start) / (steps - 1);
    
    // Set initial state (normal/visible when in view)
    spans.forEach((span, index) => {
        span.style.transition = 'all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        span.style.transform = 'translateX(0%) scale(1)';
        span.style.filter = 'blur(0px)';
        span.style.opacity = '1';
    });
    
    // Create intersection observer for the box
    const boxObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            const isIntersecting = entry.isIntersecting;
            const rect = entry.boundingClientRect;
            const isComingFromTop = rect.top > 0; // Coming from below viewport
            const isLeavingToTop = rect.bottom < window.innerHeight && !isIntersecting; // Going above viewport
            
            spans.forEach((span, index) => {
                const delay = index * 50; // Stagger effect
                
                setTimeout(() => {
                    if (isIntersecting) {
                        // Coming into view - animate TO normal state FROM the effect
                        span.style.transform = 'translateX(0%) scale(1)';
                        span.style.filter = 'blur(0px)';
                        span.style.opacity = '1';
                    } else {
                        // Going out of view - apply the original effect
                        const translateX = start + stepSize * index;
                        
                        // Opposite directions based on scroll direction
                        let finalTranslateX;
                        if (isComingFromTop) {
                            // Going out bottom - use original direction
                            finalTranslateX = translateX;
                        } else {
                            // Going out top - use opposite direction
                            finalTranslateX = -translateX;
                        }
                        
                        span.style.transform = `translateX(${finalTranslateX}%) scale(3)`;
                        span.style.filter = 'blur(10px)';
                        span.style.opacity = '0';
                    }
                }, delay);
            });
        });
    }, {
        threshold: [0, 0.1, 0.3, 0.7, 1],
        rootMargin: '100px 0px 100px 0px' // Larger margin for smoother transitions
    });
    
    boxObserver.observe(boxElement);
    
    // Fine-tuned scroll-based animation for when in view
    function updateInViewEffect() {
        const rect = boxElement.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        
        // Check if element is in viewport
        if (rect.top <= windowHeight && rect.bottom >= 0) {
            // Calculate how centered the element is
            const elementCenter = rect.top + rect.height / 2;
            const viewportCenter = windowHeight / 2;
            const distanceFromCenter = Math.abs(elementCenter - viewportCenter);
            const maxDistance = windowHeight / 2;
            const centerRatio = 1 - Math.min(distanceFromCenter / maxDistance, 1);
            
            // When perfectly centered, effects are minimal
            // When entering/leaving, effects are stronger
            const effectStrength = 1 - centerRatio;
            
            spans.forEach((span, index) => {
                if (centerRatio > 0.7) {
                    // Very close to center - minimal effect
                    span.style.transform = 'translateX(0%) scale(1)';
                    span.style.filter = 'blur(0px)';
                    span.style.opacity = '1';
                } else if (centerRatio > 0.3) {
                    // Transitioning - slight effect
                    const translateX = (start + stepSize * index) * effectStrength * 0.3;
                    const scale = 1 + (effectStrength * 0.5);
                    const blur = effectStrength * 3;
                    const opacity = 1 - (effectStrength * 0.3);
                    
                    span.style.transform = `translateX(${translateX}%) scale(${scale})`;
                    span.style.filter = `blur(${blur}px)`;
                    span.style.opacity = opacity;
                }
            });
        }
    }
    
    // Throttled scroll listener
    let scrollTimeout;
    window.addEventListener('scroll', () => {
        if (scrollTimeout) return;
        
        scrollTimeout = setTimeout(() => {
            updateInViewEffect();
            scrollTimeout = null;
        }, 16); // ~60fps
    });
    
    // Initial call
    updateInViewEffect();
}

// Initialize the effect
initSlowMotionEffect();
 </script>

 {% schema %}
{
  "name": "Collection-Banner",
  "settings": [
    {
      "type": "image_picker",
      "id": "image1",
      "label": "Image 1"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Unveil Your Essence"
    },
    {
      "type": "text",
      "id": "info",
      "label": "Info",
      "default": "When you start with a portrait and search for a pure form, a clear volume, through successive eliminations, you arrive inevitably at the egg. Likewise, starting with the egg and following the same process in reverse, one finishes with the portrait."
    },
    {
      "type": "url",
      "id": "link1",
      "label": "Button Url"
    },
    {
      "type":"text",
      "id":"btn_label1",
      "label":"Button Label 1",
      "default":"Shop Now"
    },
    {
      "type": "image_picker",
      "id": "image2",
      "label": "Image 2"
    },
    {
      "type": "text",
      "id": "title2",
      "label": "Title 2",
      "default": "What's New?"
    },
    {
      "type": "text",
      "id": "subtitle2",
      "label": "Subtitle 2",
      "default": "Get the newest kicks"
    },
    {
      "type": "url",
      "id": "link2",
      "label": "Button Url"
    },
    {
      "type":"text",
      "id":"btn_label2",
      "label":"Button Label 2",
      "default":"Discover Now"
    },
    {
      "type": "image_picker",
      "id": "image3",
      "label": "Image 3"
    },
    {
      "type": "text",
      "id": "title3",
      "label": "Title 3",
      "default": "Buy 1 Get 1"
    },
    {
      "type": "text",
      "id": "subtitle3",
      "label": "Subtitle 3",
      "default": "Starting at $17.99"
    },
    {
      "type": "url",
      "id": "link3",
      "label": "Button Url"
    },
    {
      "type":"text",
      "id":"btn_label3",
      "label":"Button Label 3",
      "default":"Shop Now"
    }
  ],
  "blocks": [],
  "presets": [
    {
      "name": "Collection-Banner"
    }
  ]
}
{% endschema %}